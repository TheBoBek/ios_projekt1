#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_ALL=C
# Initialization of flags
list_flag=false
list_currency_flag=false
status_flag=false
profit_flag=false

# XTF_PROFIT iinitialization, if export is not set
: ${XTF_PROFIT:=20}
export XTF_PROFIT
if [[ -z "$XTF_PROFIT" ]];then
    XTF_PROFIT="20"
fi

after="0000-01-01 00:00:00" # Lowest possible date
before="9999-12-31 23:59:59" # Highest possible date
currency=""
ARGS=( "$@" )
# Initialization of empty arrays to store logs and currencies
logs=()

help_printer(){
        printf "%s\n" "PŘÍKAZ může být jeden z:
list – výpis záznamů pro daného uživatele.
list-currency – výpis seřazeného seznamu vyskytujících se měn.
status – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn.
profit – výpis stavu účtu zákazníka se započítaným fiktivním výnosem.
FILTR může být kombinace následujících:
-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS.
-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj).
-c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně.
-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
}

# Function prints log for specified user 
list_func() {
    for log in "$@"; do # Iterates through logs
        if [[ "${log: -4}" == ".log" ]]; then # Check if log
            cat "$log" # Opens the file for further pipe
        else # Check if zipped
            gunzip -c "$log" # Unzipps the file for further pipe
        fi
    # Pipe to awk segment
    done | awk -v trader="$trader" -v currenciesStr="$currencies" -v after="$after" -v before="$before" -F';' '
    BEGIN {
        split(currenciesStr, currencyArr, " ") # Split the string to array of keys for map
        # Iterates through the array and assign true value to cpecified key
        for (i in currencyArr) {
            isCurrencyInArray[currencyArr[i]] = 1; # Create map (dict) and sets key values to 1
        }
    }
    {   
        # Check if conditions are met and print the line
        if ($1 == trader && (($3 in isCurrencyInArray) || currenciesStr == "") && $2 > after && $2 < before) print $0
    }'
}

# Function print sorted log of currencies
list_curencies(){
    for log in "$@"; do # Iterates through logs
        if [[ "${log: -4}" == ".log" ]]; then # Check if log
            cat "$log" # Opens the file for further pipe
        else # Check if zipped
            gunzip -c "$log" # Unzipps the file for further pipe
        fi
    # Pipe to awk segment
    done | awk -v trader="$trader" -v currenciesStr="$currencies" -v after="$after" -v before="$before" -F';' '
    BEGIN {
        split(currenciesStr, currencyArr, " ") # Split the string to array of keys for map
        # Iterates through the array and assign true value to cpecified key
        for (i in currencyArr) {
            isCurrencyInArray[currencyArr[i]] = 1; # Create map (dict) and sets key values to 1
        }
    }
    {               
        # Check if conditions are met and print the currency
        if ($1 == trader && (($3 in isCurrencyInArray) || currenciesStr == "") && $2 > after && $2 < before) print $3
    }' | sort | uniq # Sort and remove duplicates
}

# Function print log of (real or fictive) balances (for each crpytoCur) for specified user
status_func() {
    for log in "$@"; do # Iterates through logs
    if [[ "${log: -4}" == ".log" ]]; then # Check if log
        cat "$log" # Opens the file for further pipe
    else # Check if zipped
        gunzip -c "$log" # Unzipps the file for further pipe
    fi
    # Pipe to awk segment   
    done | awk -v profit="$profit_koef" -v trader="$trader" -v currenciesStr="$currencies" -v after="$after" -v before="$before" -F';' '
    BEGIN {
        # Split currenciesStr into an array, using comma as delimiter
        split(currenciesStr, currencyArr, " ")
        for (i in currencyArr) {
            isCurrencyInArray[currencyArr[i]] = 1;
        }
    }
    {
        if ($1 == trader && (($3 in isCurrencyInArray) || currenciesStr == "") && $2 > after && $2 < before) {
                balance[$3] += $4 # Create map with with keys as currency codes and values as balances
        }
    }
    END {
        # Iterate through the map and modify balances
        for (curr in balance) {
            if (balance[curr] > 0) {
                adjustedBalance = balance[curr] * profit;
            }
            else {
                adjustedBalance = balance[curr];
            }
            printf "%s : %.4f\n", curr, adjustedBalance
        }
    }' | sort
}

# Function checks if daytime data from input arguments are valid
check_daytime_input() {
    local daytime="$1"
    # Format of the daytime
    local regex='^[0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$'

    # Checks if daytime is valid format with regex
    if [[ $daytime =~ $regex ]]; then
        return 0 # True the string is valid
    else
        return 1 # False the string is not valid
    fi
}

# Function runs the log and decides if it's data are valid
data_check() {
    if [[ "${1: -4}" == ".log" ]]; then # Check if log
        cat "$1" # Opens the file for further pipe
    else # Check if zipped
        gunzip -c "$1" # Unzipps the file for further pipe
    fi | awk -F';' '
    # Function check if daytime is in valid format
    function is_daytime_valid(daytime) {
        if (daytime ~ /^[0-9]{4}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/){
            return 1;
        }
        else {
            return 0;
        }
    }

    # Function check if a string is not empty
    function is_not_empty(string) {
        if (string != "") {
            return 1;
        }
        else {
            return 0;
        }
    }

    BEGIN {
        valid = 1; # Flag for valid data
    }

    {
        # Check if correct data, correct daytime regex, trader value and currency not empty, 
        if (NF != 4 || !is_not_empty($1) || !is_daytime_valid($2) || !is_not_empty($3) || !is_not_empty($4)) {
            valid = 0; # Switches to invalid if check fails
            exit 1; # Exit
        }
    }

    END {
        exit !valid; # Return value of the script 
    }'
    return $? # Return the exit value of the awk script
}

flag_count=0 # Checks if one of the commands (list, list-currency, status, profit) is set multiple times
i=0
a_count=0 # Checks if '-a' was is multiple times
b_count=0 # Checks if '-b' was is multiple times

# Iterating through arguments
while [ $i -lt ${#ARGS[@]} ]; do
    # Settlement of flags based on triggered argument
    case "${ARGS[i]}" in
        '') # Skip if element is empty
            ;;
        -h|--help) # Print help module
            help_printer
            ;;
        list) # Set flag
            list_flag=true
            ((flag_count+=1))
            ;;
        list-currency) # Set flag
            list_currency_flag=true
            ((flag_count+=1))
            ;;
        status) # Set flag
            ((flag_count+=1))
            status_flag=true
            ;;
        profit) # Set flag
            ((flag_count+=1))
            status_flag=true
            profit_flag=true
            ;;
        -a) # Set after flag
            ((a_count+=1))
            after="${ARGS[i+1]}" # Save variable containing date data to variable
            if ! check_daytime_input "$after"; then # Check for invalid input
                unset XTF_PRFIT
                echo "Invalid daytime argument" >&2
                exit 1
            fi
            ((i++)) # Skip the next argument
            ;;
        -b)
            ((b_count+=1))
            before="${ARGS[i+1]}" # Save variable containing date data to variable
            if ! check_daytime_input "$after"; then # Check for invalid input
                unset XTF_PRFIT
                echo "Invalid daytime argument" >&2
                exit 1
            fi
            ((i++)) # Skip the next argument
            ;;
        -c)
            # If currencies not empty it appends space
            if [[ -n "$currencies" ]]; then
                currencies+=" "
            fi
            currencies+="${ARGS[i+1]}" # Append found currency to array
            ((i++)) # Skip the next argument
            ;;
        *)
            # Check if the argument is log file or trader name
            if [[ "${ARGS[i]: -4}" == ".log" ]] || [[ "${ARGS[i]: -3}" == ".gz" ]]; then
                if data_check "${ARGS[i]}"; then
                    logs+=("${ARGS[i]}") # Append found log to array
                else
                    unset XTF_PRFIT
                    echo "Invalid data." >&2
                    exit 1;
                fi

            else
                trader="${ARGS[i]}" # Save trader name
            fi
            ;;
    esac
    ((i++)) # Increment counter for the while loop
done

# If no flags were triggered than it sets 'list_flag' as true
if [[ "$list_flag" == false && "$list_currency_flag" == false && "$status_flag" == false && "$currency" = "" ]]; then
    list_flag=true
fi
if [[ -z "$trader" ]]; then
    unset XTF_PRFIT
    echo "No trader given." >&2
    exit 1
fi
# Checks if flag counts are valid -> (less than 2)
if [[ "$flag_count" -lt 2 ]] && [[ "$a_count" -lt 2 ]] && [[ "$b_count" -lt 2 ]]; then
    # Based on settled flags, will run the function needed
    if [[ $list_flag = true ]]; then
        list_func "${logs[@]}"
    fi
    if [[ $list_currency_flag == true ]]; then
        list_curencies "${logs[@]}"
    fi
    if [[ $status_flag == true ]]; then
        profit_koef="1" # Setting "profit_koef" to 1 
        if [[ "$profit_flag" == true ]];then # If profit_flag is ture -> 
            profit_koef=$(printf "%s\n" "scale=4; $XTF_PROFIT * 0.01 + 1" | bc) # Change the profit koef based on the "XTF_PROFIT"
        fi
        status_func "${logs[@]}"
    fi
fi
unset XTF_PROFIT


